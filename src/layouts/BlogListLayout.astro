---
import Layout from '@/layouts/Layout.astro'
import groupBy from 'lodash/groupBy'
import keys from 'lodash/keys'
import { slugifySpace, formatDateMD } from '@/utils/format'
import { getCollection } from 'astro:content'
import { useTranslations, type Lang, DEFAULT_LOCALE } from '@/utils/i18n'

export interface Props {
    lang?: string
}

const locale = Astro.currentLocale as Lang
const t = useTranslations(locale)

const allPosts = await getCollection('blog', ({ data }) => {
    return data.title && (import.meta.env.PROD ? data.isDraft !== true : true)
})

const filteredPosts = allPosts
    .filter((post) => {
        if (locale !== undefined) {
            return post.data.langs.includes(locale) && post.slug.startsWith(locale)
        } else {
            return post.slug.startsWith(DEFAULT_LOCALE)
        }
    })
    .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime()) // sort by date

const tags = [...new Set(filteredPosts.flatMap((post) => post.data.tags))]

const postsByYear = groupBy(filteredPosts, (post) => post.data.pubDate.getFullYear())

const result = keys(postsByYear)
    .map((key) => ({
        year: Number(key),
        posts: postsByYear[key].sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
    }))
    .filter((item) => !isNaN(item.year))
    .reverse()
---

<Layout title="posts">
    <main class="mt-8">
        {
            result.map((year) => {
                return (
                    <div>
                        <div class="font-inter text-2xl font-bold italic my-3">{year.year}</div>
                        <ul>
                            {year.posts.map((post) => {
                                return (
                                    <li>
                                        <span style={{ flex: '0 0 5rem' }}>
                                            <time class="mr-2">{formatDateMD(post.data.pubDate.toISOString())}</time>
                                        </span>

                                        <a rel="prefetch-intent" href={`/blog/${post.slug}`} class="panda-link-static">
                                            {post.data.title}
                                        </a>
                                    </li>
                                )
                            })}
                        </ul>
                    </div>
                )
            })
        }

        <div class="mt-6">
            {
                tags.map((tag) => {
                    return (
                        <a class="mr-1 text-sm panda-link my-1 hover:font-bold" href={'/tags#' + slugifySpace(tag)}>
                            #{t(tag)}
                        </a>
                    )
                })
            }
        </div>
    </main>
</Layout>

<style>
    ul {
        @apply list-none flex flex-wrap flex-col px-2;
    }
    ul li {
        @apply inline-block font-inter font-light my-1 transition-all duration-300;
    }
    li span {
        @apply text-[0.9em];
    }
</style>
